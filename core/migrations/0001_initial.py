# Generated by Django 5.1.3 on 2025-04-26 08:41

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Pokemon',
            fields=[
                ('pokedex_id', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('type1', models.CharField(max_length=50)),
                ('type2', models.CharField(blank=True, max_length=50, null=True)),
                ('rarity', models.CharField(choices=[('Common', 'Common'), ('Uncommon', 'Uncommon'), ('Rare', 'Rare'), ('Mythic', 'Mythic')], default='Common', max_length=10)),
                ('image_url', models.URLField(blank=True, max_length=300, null=True)),
            ],
            options={
                'verbose_name_plural': 'Pokemon',
                'ordering': ['pokedex_id'],
            },
        ),
        migrations.CreateModel(
            name='PokemonPack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('cost', models.PositiveIntegerField(help_text='Cost in in-game currency')),
                ('image_url', models.URLField(blank=True, help_text='Optional image for the pack', max_length=300, null=True)),
                ('is_available', models.BooleanField(default=True, help_text='Is this pack currently available in the store?')),
            ],
            options={
                'ordering': ['cost', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TradingEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='CollectionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obtained_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('pokemon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.pokemon')),
            ],
            options={
                'ordering': ['obtained_at'],
            },
        ),
        migrations.CreateModel(
            name='TradeOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accepted', 'Accepted'), ('Rejected', 'Rejected'), ('Cancelled', 'Cancelled')], default='Pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_suspicious', models.BooleanField(default=False, help_text='Admin flag for potentially unfair trades')),
                ('offered_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trade_offers_as_offer', to='core.collectionitem')),
                ('requested_pokemon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trade_offers_as_request', to='core.pokemon')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('in_game_currency', models.PositiveIntegerField(default=500)),
                ('last_login_bonus', models.DateField(blank=True, help_text='The date the user last received a daily login bonus.', null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TransactionHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('Market Purchase', 'Market Purchase'), ('Trade', 'Trade'), ('Daily Reward', 'Daily Reward'), ('Pack Purchase', 'Pack Purchase'), ('Currency Purchase', 'Currency Purchase')], max_length=20)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('price', models.PositiveIntegerField(blank=True, null=True)),
                ('collection_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.collectionitem')),
                ('pack_purchased', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.pokemonpack')),
                ('pokemon', models.ForeignKey(blank=True, help_text='Primary Pokemon species involved (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.pokemon')),
                ('trade_offer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='history_entry', to='core.tradeoffer')),
                ('seller', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sales', to='core.userprofile')),
                ('user_profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='core.userprofile')),
            ],
            options={
                'verbose_name_plural': 'Transaction Histories',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='tradeoffer',
            name='receiver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_trade_offers', to='core.userprofile'),
        ),
        migrations.AddField(
            model_name='tradeoffer',
            name='sender',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_trade_offers', to='core.userprofile'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_read', models.BooleanField(default=False)),
                ('related_url', models.CharField(blank=True, max_length=255, null=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='core.userprofile')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='MarketplaceListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('Available', 'Available'), ('Sold', 'Sold'), ('Cancelled', 'Cancelled')], default='Available', max_length=10)),
                ('listed_at', models.DateTimeField(auto_now_add=True)),
                ('sold_at', models.DateTimeField(blank=True, null=True)),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='listing', to='core.collectionitem')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='listings', to='core.userprofile')),
            ],
            options={
                'ordering': ['-listed_at'],
            },
        ),
        migrations.AddField(
            model_name='collectionitem',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection', to='core.userprofile'),
        ),
        migrations.CreateModel(
            name='PackRarityOdds',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rarity', models.CharField(choices=[('Common', 'Common'), ('Uncommon', 'Uncommon'), ('Rare', 'Rare'), ('Mythic', 'Mythic')], max_length=10)),
                ('probability', models.FloatField(help_text='Probability (0.0 to 1.0) of drawing this rarity. Sum for a pack should ideally be 1.0')),
                ('pack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rarity_odds', to='core.pokemonpack')),
            ],
            options={
                'verbose_name_plural': 'Pack Rarity Odds',
                'ordering': ['pack', 'rarity'],
                'unique_together': {('pack', 'rarity')},
            },
        ),
    ]
